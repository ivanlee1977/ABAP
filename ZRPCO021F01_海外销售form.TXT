*&---------------------------------------------------------------------*
*&  包含                ZRPCO021F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_data .
  DATA:lt_ce11000 LIKE ce11000 OCCURS 0 WITH HEADER LINE.
  DATA:lt_makt LIKE makt OCCURS 0 WITH HEADER LINE.
  DATA:lv_object LIKE ausp-objek.
  DATA:lt_class      LIKE sclass OCCURS 0 WITH HEADER LINE,
       lt_objectdata LIKE clobjdat OCCURS 0 WITH HEADER LINE.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_ce11000
    FROM ce11000
    WHERE bukrs = p_bukrs
      AND vkorg = p_vkorg
      AND gjahr = p_gjahr
      AND perde IN s_perde
      AND paledger = '02'.

  IF lt_ce11000[] IS NOT INITIAL.
***物料描述
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE lt_makt
      FROM makt
      FOR ALL ENTRIES IN lt_ce11000
      WHERE matnr = lt_ce11000-artnr
        AND spras = sy-langu.
  ENDIF.

  SORT lt_makt BY matnr.

  LOOP AT lt_ce11000.
    MOVE-CORRESPONDING lt_ce11000 TO gt_out.
    CLEAR lv_object.
    REFRESH:lt_class,lt_objectdata.
    lv_object = gt_out-artnr.
    CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
      EXPORTING
        classtype          = '001'
        language           = sy-langu
        object             = lv_object
        key_date           = sy-datum
      TABLES
        t_class            = lt_class
        t_objectdata       = lt_objectdata
      EXCEPTIONS
        no_classification  = 1
        no_classtypes      = 2
        invalid_class_type = 3
        OTHERS             = 4.
    READ TABLE lt_objectdata WITH KEY atnam = 'ZFER_CPX'. "产品线
    IF sy-subrc = 0 AND lt_objectdata-ausp1 NE '?'.
      gt_out-ww003 = lt_objectdata-ausp1.
    ENDIF.

    READ TABLE lt_objectdata WITH KEY atnam = 'ZFER_CPXH'. "产品型号
    IF sy-subrc = 0 AND lt_objectdata-ausp1 NE '?'.
      gt_out-ww005 = lt_objectdata-ausp1.
    ENDIF.

    gt_out-ztax = gt_out-vv002 - gt_out-vv001.
***物料描述
    READ TABLE lt_makt WITH KEY matnr = lt_ce11000-artnr BINARY SEARCH.
    IF sy-subrc = 0.
      gt_out-maktx = lt_makt-maktx.
    ENDIF.
    COLLECT gt_out.
    CLEAR gt_out.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_get_fieldcat .
  mcr_build_fieldcat:'ARTNR'         '产品代码'          'ARTNR'     'CE11000'    ''         '',
                     'MAKTX'         '产品名称'          'MAKTX'     'MAKT'       ''         '',
                     'WW005'         '产品型号'          'WW005'     'CE11000'    ''         '',
                     'WW003'         '产品线'            'WW003'     'CE11000'    ''         '',
                     'ABSMG'         '数量'              'ABSMG'     'CE11000'    ''         '',
                     'VV001'         '销售收入(不含税)' 'VV001'     'CE11000'    ''         '',
                     'ZTAX'          '税额'              ''          ''           'P'        '15',
                     'VV002'         '合计'              'VV002'      'CE11000'   ''         ''.

  gs_layout-cwidth_opt = 'X'.
  gs_layout-zebra = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_OUTPUT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM frm_output_data .
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER =
*     I_BUFFER_ACTIVE    =
      i_callback_program = sy-repid
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   =
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       =
*     I_GRID_SETTINGS    =
      is_layout_lvc      = gs_layout
      it_fieldcat_lvc    = gt_fcat[]
*     IT_EXCLUDING       =
*     IT_SPECIAL_GROUPS_LVC             =
*     IT_SORT_LVC        =
*     IT_FILTER_LVC      =
*     IT_HYPERLINK       =
*     IS_SEL_HIDE        =
      i_default          = 'X'
      i_save             = 'A'
*     IS_VARIANT         =
*     IT_EVENTS          =
*     IT_EVENT_EXIT      =
*     IS_PRINT_LVC       =
*     IS_REPREP_ID_LVC   =
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  =
*     I_HTML_HEIGHT_END  =
*     IT_ALV_GRAPHICS    =
*     IT_EXCEPT_QINFO_LVC               =
*     IR_SALV_FULLSCREEN_ADAPTER        =
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           =
*     ES_EXIT_CAUSED_BY_USER            =
    TABLES
      t_outtab           = gt_out[]
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.
